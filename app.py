import streamlit as st
import google.generativeai as genai
from dotenv import load_dotenv
import os

from langchain_google_genai import ChatGoogleGenerativeAI
from langchain.schema import HumanMessage

# Load API key from .env file
load_dotenv()
API_KEY = os.getenv('GOOGLE_API_KEY')
if not API_KEY:
    st.error("Google API Key not found. Please set GOOGLE_API_KEY in your .env file.")
    st.stop() # Stop execution if API key is missing

genai.configure(api_key=API_KEY)

# Initialize the Generative AI model
# Using a temperature of 0.3 makes the output more focused and less random, good for factual estimations.
model = ChatGoogleGenerativeAI(model="gemini-pro", temperature=0.3)

# --- Function to get user input ---
def get_user_input():
    st.sidebar.header("Your Living Details")
    city = st.sidebar.text_input("Enter your city in Canada (e.g., 'Toronto, Ontario')", "Toronto, Ontario")
    income = st.sidebar.number_input("Your estimated monthly income (CAD):", min_value=0.0, value=1500.0, step=50.0)

    st.sidebar.subheader("Estimated Monthly Preferences (CAD)")
    # Using specific number inputs for common preferences makes it easier for the user
    # and ensures structured data for the prompt.
    rent = st.sidebar.number_input("Rent (e.g., shared accommodation)", min_value=0.0, value=800.0, step=10.0, key="rent_input")
    groceries = st.sidebar.number_input("Groceries", min_value=0.0, value=350.0, step=5.0, key="groceries_input")
    transit = st.sidebar.number_input("Public Transit Pass", min_value=0.0, value=150.0, step=5.0, key="transit_input")

    # You can add more specific preference inputs here if needed
    # e.g., dining_out = st.sidebar.number_input("Dining Out", min_value=0.0, value=100.0, step=5.0)

    # Store preferences in a dictionary for the LLM prompt
    preferences_dict = {
        "Rent (shared accommodation)": rent,
        "Groceries": groceries,
        "Public Transit Pass": transit
        # Add other preferences here if you introduce more input fields
    }
    return city, income, preferences_dict

# --- Function to generate the LLM prompt and get the estimation ---
def get_cost_of_living_estimation_from_llm(city: str, income: float, preferences: dict) -> str:
    """
    Generates a detailed prompt for estimating the monthly cost of living for a student
    and sends it to the Gemini Pro model to get the actual estimation.

    Args:
        city (str): The specific city in Canada where the student will live.
        income (float): The student's estimated monthly income in Canadian dollars.
        preferences (dict): A dictionary of specific living preferences and their estimated costs.
    Returns:
        str: The estimated cost of living response generated by the LLM.
    """
    # Build the prompt string based on the user's input and specific preferences
    prompt = f"""
    Please provide a comprehensive and detailed estimation of the *monthly* cost of living for a student residing in {city}, Canada.

    The student has an estimated *monthly income* of ${income:.2f} CAD.

    Crucially, I need you to *focus exclusively* on the following specified preferences and their estimated costs. Please break down the expenses for each preference explicitly:
    """

    for preference_name, cost_value in preferences.items():
        # Only include preferences where the user has entered a non-zero value
        if cost_value > 0:
            prompt += f"- {preference_name}: ${cost_value:.2f} CAD (User's estimated cost)\n"

    prompt += f"""

    **IMPORTANT:** Please *exclude* all other expenses not explicitly listed above, such as:
    - Utilities (electricity, heating, internet, water)
    - Entertainment and leisure activities
    - Personal care products
    - Clothing
    - Health insurance or medical expenses
    - Textbooks and academic supplies
    - Travel outside of specified public transit
    - Miscellaneous unforeseen expenses

    Your response should clearly present:

    1.  A detailed breakdown of the *total estimated monthly expenses* based *only* on the provided preferences.
    2.  A clear and concise conclusion analyzing whether the total estimated expenses are within the student's stated monthly income of ${income:.2f} CAD.
    3.  If the expenses exceed the income, suggest which preference categories might be adjusted to fit the budget, given the provided estimates. If they are within budget, state how much surplus remains.

    Please present the information in an easy-to-read format, perhaps using bullet points or a table for the breakdown.
    """

    # Send the prompt to the Generative AI model
    message = HumanMessage(content=prompt)
    try:
        response = model([message])
        return response.content
    except Exception as e:
        st.error(f"An error occurred while getting the estimation: {e}")
        return "Could not retrieve estimation."

# --- Function to display the results ---
def display_results(estimated_expenses: str):
    st.subheader("Estimated Monthly Expenses:")
    st.markdown(estimated_expenses) # Use st.markdown to render potential formatting from LLM

# --- Main Application ---
def main():
    # --- Streamlit Page Configuration for Dark Theme ---
    st.set_page_config(
        page_title="Canadian Student Cost of Living",
        page_icon="ðŸ‡¨ðŸ‡¦",
        layout="centered",
        initial_sidebar_state="expanded",
        # Explicit dark theme settings (optional, Streamlit often detects system preference)
        # Uncomment and adjust these for a guaranteed dark theme or specific color palette
        # primaryColor="#F63366",       # A contrasting accent color (e.g., for buttons)
        # backgroundColor="#0E1117",    # Dark background
        # secondaryBackgroundColor="#262730", # Slightly lighter dark for secondary elements (sidebar)
        # textColor="#FAFAFA"           # Light text
    )

    st.title("Study Smart, Live Well:")
    st.header("The Canadian Student's Cost-of-Living Tool")
    st.write("Estimate your monthly expenses and manage your budget as a student in Canada.")

    # Get user input from the sidebar
    city, income, preferences = get_user_input()

    # Calculate and display results when the button is clicked
    st.markdown("---") # Visual separator before the button
    if st.button("Calculate Cost of Living"):
        # Validate inputs
        if not city:
            st.warning("Please enter a **city**.")
        elif income is None or income < 0:
            st.warning("Please enter a valid **monthly income** (CAD).")
        # Ensure that at least one preference has a value, otherwise the LLM won't have much to estimate
        elif not any(preferences.values()):
            st.warning("Please enter estimated costs for at least one **preference** (e.g., Rent, Groceries).")
        else:
            with st.spinner("Crunching numbers with Google Gemini..."):
                # Call the function to get the LLM's estimation
                estimated_expenses_text = get_cost_of_living_estimation_from_llm(city, income, preferences)
                display_results(estimated_expenses_text)

    # --- Footer for dark theme ---
    st.markdown(
        """
        <style>
        .footer {
            position: fixed;
            left: 0;
            bottom: 0;
            width: 100%;
            background-color: #262730; /* Darker background for footer */
            color: #FAFAFA; /* Light text for footer */
            text-align: center;
            padding: 10px 0; /* Add some padding */
            font-size: 0.8em; /* Slightly smaller font */
            border-top: 1px solid #3a3b3f; /* Subtle top border */
        }
        </style>
        """,
        unsafe_allow_html=True
    )
    st.markdown("<div class='footer'>Created By Lakshay Arora. Powered by Google Gemini.</div>", unsafe_allow_html=True)


if __name__ == "__main__":
    main()


# import streamlit as st
# import google.generativeai as genai
# from dotenv import load_dotenv
# import os

# from langchain_google_genai import ChatGoogleGenerativeAI

# from langchain.schema import HumanMessage

# # Load API key from .env file 
# load_dotenv()
# API_KEY = os.getenv('GOOGLE_API_KEY') # Enter you Google API here
# genai.configure(api_key=API_KEY)

# model = ChatGoogleGenerativeAI(model="gemini-pro", temperature=0.3)

# # Function to get user input
# def get_user_input():
#     city = st.text_input("Enter the city in Canada:")
#     income = st.number_input("Enter your expected monthly income (CAD):", min_value=0)
#     preferences = st.text_area("Enter your preferences (housing, transportation, etc.). You can input multiple preferences as well:")
#     return city, income, preferences

# # Function to get cost of living estimation from Gemini Pro 
# #def get_cost_of_living_estimation(city, income, preferences):
# #    prompt = f"Estimate the monthly cost of living for a student in {city}, Canada. Assuming a monthly income of ${income}, estimate the cost of preferences ${preferences}. Consider only the specified preferences and exclude other expenses such as utilities or entertainment. Conclude by analyzing whether the estimated expenses are within the user's budget based on their income."

# def get_cost_of_living_estimation(city, income, preferences):
#     """
#     Generates a detailed prompt for estimating the monthly cost of living for a student.

#     Args:
#         city (str): The specific city in Canada where the student will live (e.g., "Toronto, Ontario").
#         income (float): The student's estimated monthly income in Canadian dollars.
#         preferences (dict): A dictionary of specific living preferences and their estimated costs.
#                            Keys should be categories (e.g., "Rent (1-bedroom apartment)", "Groceries", "Public Transit Pass")
#                            and values should be estimated monthly costs in CAD.
#                            Example: {"Rent (shared accommodation)": 800, "Groceries": 350, "Public Transit Pass": 150}
#     """

#     prompt = f"""
#     Please provide a comprehensive and detailed estimation of the *monthly* cost of living for a student residing in {city}, Canada.

#     The student has an estimated *monthly income* of ${income:.2f} CAD.

#     Crucially, I need you to *focus exclusively* on the following specified preferences and their estimated costs. Please break down the expenses for each preference explicitly:

#     """

#     for preference, cost in preferences.items():
#         prompt += f"- {preference}: ${cost:.2f} CAD (User's estimated cost)\n"

#     prompt += f"""

#     **IMPORTANT:** Please *exclude* all other expenses not explicitly listed above, such as:
#     - Utilities (electricity, heating, internet, water)
#     - Entertainment and leisure activities
#     - Personal care products
#     - Clothing
#     - Health insurance or medical expenses
#     - Textbooks and academic supplies
#     - Travel outside of specified public transit
#     - Miscellaneous unforeseen expenses

#     Your response should clearly present:

#     1.  A detailed breakdown of the *total estimated monthly expenses* based *only* on the provided preferences.
#     2.  A clear and concise conclusion analyzing whether the total estimated expenses are within the student's stated monthly income of ${income:.2f} CAD.
#     3.  If the expenses exceed the income, suggest which preference categories might be adjusted to fit the budget, given the provided estimates. If they are within budget, state how much surplus remains.

#     Please present the information in an easy-to-read format, perhaps using bullet points or a table for the breakdown.
#     """
#     return prompt
    

#     # Use the correct method for text generation
#     message = HumanMessage(content=prompt)
#     response = model([message])
#     estimated_expenses = response.content
#     return estimated_expenses

# # Function to display the results
# def display_results(estimated_expenses):
#     st.subheader("Estimated Monthly Expenses:")
#     st.write(estimated_expenses)
    

# def main():

    
    
#     st.header("Study Smart, Live Well: The Canadian Student's Cost-of-Living Tool")

    

#      # Get user input
#     city, income, preferences = get_user_input()
#     # Calculate and display results when the button is clicked
#     if st.button("Calculate"):
#         if city and income and preferences:
#                 with st.spinner("Calculating..."):
#                      estimated_expenses = get_cost_of_living_estimation(city, income, preferences)
#                      display_results(estimated_expenses)
#         else:
#              st.warning("Please fill in all fields.")
    
#     st.markdown("""
#     <style>
#     .footer {
#         position: fixed;
#         left: 0;
#         bottom: 0;
#         width: 100%;
#         background-color: lightgray;  /* Adjust color if desired */
#         color: black;   /* Adjust color if desired  */
#         text-align: center;
#     }
#     </style>
#     """, unsafe_allow_html=True)

#     st.markdown("<div class='footer'>Created By Lakshay Arora. Powered by Google Gemini.</div>", unsafe_allow_html=True)


# if __name__ == "__main__":
#     main()
